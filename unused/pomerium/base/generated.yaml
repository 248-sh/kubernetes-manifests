---
# Source: pomerium/charts/pomerium/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: pomerium-redis
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
---
# Source: pomerium/charts/pomerium/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pomerium-authenticate
  labels:
    app.kubernetes.io/name: pomerium-authenticate
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: authenticate
  annotations:
---
# Source: pomerium/charts/pomerium/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pomerium-authorize
  labels:
    app.kubernetes.io/name: pomerium-authorize
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: authorize
  annotations:
---
# Source: pomerium/charts/pomerium/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pomerium-databroker
  labels:
    app.kubernetes.io/name: pomerium-databroker
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: databroker
  annotations:
---
# Source: pomerium/charts/pomerium/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pomerium-proxy
  labels:
    app.kubernetes.io/name: pomerium-proxy
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: proxy
  annotations:
---
# Source: pomerium/charts/pomerium/templates/redis/password-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pomerium-redis-password
  labels:
    app.kubernetes.io/name: pomerium
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
type: Opaque
data:
  password: TlVWYVIwRjNjVmMxYnpKUE5VNVdZM0ZaZGxCemJ6UmlSRlJMT0ZOcWVHYz0=
  DATABROKER_STORAGE_CONNECTION_STRING: cmVkaXNzOi8vcG9tZXJpdW0tcmVkaXMtbWFzdGVyLnBvbWVyaXVtLnN2Yy5jbHVzdGVyLmxvY2Fs
---
# Source: pomerium/charts/pomerium/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pomerium
  labels:
    app.kubernetes.io/name: pomerium
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
type: Opaque
stringData:
  config.yaml: |
    autocert: false
    dns_lookup_family: V4_ONLY
    address: :80
    grpc_address: :80
    authenticate_service_url: https://authenticate.248.sh
    authorize_service_url: http://pomerium-authorize.pomerium.svc.cluster.local
    databroker_service_url: http://pomerium-databroker.pomerium.svc.cluster.local
    idp_provider: github
    idp_scopes: 
    idp_provider_url: 
    insecure_server: true
    grpc_insecure: true
    forward_auth_url: http://pomerium-proxy.pomerium
    cookie_secret: SystWz53Yzp3O3suczFwJ3p0Jkw5PVIgUHd7MXYwayo=
    shared_secret: OFVLVUFHWklVXnNpXWJGUkhsfC4uaWdSKj1mMH0yeGE=
    idp_client_id: lalala
    idp_client_secret: lalala
    idp_service_account: lalala
    databroker_storage_tls_skip_verify: false    
    routes:
      - from: https://authenticate.248.sh
        to: http://pomerium-authenticate.pomerium.svc.cluster.local
        preserve_host_header: true
        allow_public_unauthenticated_access: true
        tls_server_name: authenticate.248.sh
---
# Source: pomerium/charts/pomerium/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pomerium-shared
  labels:
    app.kubernetes.io/name: pomerium
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
type: Opaque
data:
  SHARED_SECRET: TEgwMWRUUjJlVmhZVjBaTUtVVnZiMkI0TW5WYmJUaFhUa0F5ZUY5K2ZTbz0=
  COOKIE_SECRET: YUROcU9EZ3hQMnRHWUhVMWZHQThhakZLT0ZKa1RpWndaRzhnWjNWQ1JGZz0=
---
# Source: pomerium/charts/pomerium/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pomerium-redis-configuration
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: pomerium/charts/pomerium/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pomerium-redis-health
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_TLS_PORT \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_TLS_PORT \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        --tls \
        --cacert /opt/bitnami/redis/certs/ca.crt \
          --cert /opt/bitnami/redis/certs/tls.crt \
          --key /opt/bitnami/redis/certs/tls.key \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: pomerium/charts/pomerium/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pomerium-redis-scripts
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "0")
    ARGS+=("--tls-port" "${REDIS_TLS_PORT}")
    ARGS+=("--tls-cert-file" "${REDIS_TLS_CERT_FILE}")
    ARGS+=("--tls-key-file" "${REDIS_TLS_KEY_FILE}")
    ARGS+=("--tls-ca-cert-file" "${REDIS_TLS_CA_FILE}")
    ARGS+=("--tls-auth-clients" "${REDIS_TLS_AUTH_CLIENTS}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "0")
    ARGS+=("--tls-port" "${REDIS_TLS_PORT}")
    ARGS+=("--tls-cert-file" "${REDIS_TLS_CERT_FILE}")
    ARGS+=("--tls-key-file" "${REDIS_TLS_KEY_FILE}")
    ARGS+=("--tls-ca-cert-file" "${REDIS_TLS_CA_FILE}")
    ARGS+=("--tls-auth-clients" "${REDIS_TLS_AUTH_CLIENTS}")
    ARGS+=("--tls-replication" "yes")
    ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: pomerium/charts/pomerium/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-redis-headless
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: pomerium
---
# Source: pomerium/charts/pomerium/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-redis-master
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: master
---
# Source: pomerium/charts/pomerium/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-redis-replicas
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: replica
---
# Source: pomerium/charts/pomerium/templates/authenticate-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-authenticate
  labels:
    app.kubernetes.io/name: pomerium-authenticate
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authenticate
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: pomerium-authenticate
    app.kubernetes.io/instance: pomerium
---
# Source: pomerium/charts/pomerium/templates/authorize-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-authorize
  labels:
    app.kubernetes.io/name: pomerium-authorize
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: authorize
spec:
  clusterIP: None
  type: ClusterIP
  ports:
    - port: 80
      targetPort: grpc
      protocol: TCP
      name: grpc
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: pomerium-authorize
    app.kubernetes.io/instance: pomerium
---
# Source: pomerium/charts/pomerium/templates/cache-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-cache
  labels:
    app.kubernetes.io/name: pomerium-cache
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cache
spec:
  clusterIP: None
  type: ClusterIP
  ports:
    - port: 80
      targetPort: grpc
      protocol: TCP
      name: grpc
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: pomerium-databroker
    app.kubernetes.io/instance: pomerium
---
# Source: pomerium/charts/pomerium/templates/databroker-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-databroker
  labels:
    app.kubernetes.io/name: pomerium-databroker
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: databroker
spec:
  clusterIP: None
  type: ClusterIP
  ports:
    - port: 80
      targetPort: grpc
      protocol: TCP
      name: grpc
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: pomerium-databroker
    app.kubernetes.io/instance: pomerium
---
# Source: pomerium/charts/pomerium/templates/proxy-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pomerium-proxy
  labels:
    app.kubernetes.io/name: pomerium-proxy
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: proxy
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: pomerium-proxy
    app.kubernetes.io/instance: pomerium
---
# Source: pomerium/charts/pomerium/templates/authenticate-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: pomerium-authenticate
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: authenticate
  name: pomerium-authenticate
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pomerium-authenticate
      app.kubernetes.io/instance: pomerium
  template:
    metadata:
      annotations:
        checksum: 7ff5533132871d3ade5a5d1e5f74d91af0b1e19ffd9298947ed6b86932090d35
      labels:
        app.kubernetes.io/name: pomerium-authenticate
        helm.sh/chart: pomerium-25.0.2
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: pomerium
    spec:
      containers:
      - name: pomerium
        image: pomerium/pomerium:v0.15.7
        imagePullPolicy: IfNotPresent
        args:
          - --config=/etc/pomerium/config.yaml
        env:        
        - name: CERTIFICATE_FILE
          value: /pomerium/tls/tls.crt
        - name: CERTIFICATE_KEY_FILE
          value: /pomerium/tls/tls.key
        - name: SERVICES
          value: authenticate
        - name: SIGNING_KEY
          valueFrom:
            secretKeyRef:
              name: pomerium-signing-key
              key: signing-key        
        - name: POD_IP
          valueFrom: 
            fieldRef: 
              fieldPath: status.podIP
        - name: METRICS_PORT
          value: "9090"
        - name: METRICS_ADDRESS
          value: "$(POD_IP):$(METRICS_PORT)"
        envFrom:
          - secretRef:
              name: pomerium-shared
        ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 9090
            name: metrics
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
        resources:
          requests:
            cpu: "0.01"
            memory: 16Mi
        volumeMounts:
          - mountPath: /etc/pomerium/
            name: config
          - mountPath: /pomerium/tls
            name: service-tls
          - mountPath: /pomerium/ca
            name: ca-tls
      serviceAccountName: pomerium-authenticate
      volumes:
        - name: config
          secret:
            secretName: pomerium
        - name: ca-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
        - name: service-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
---
# Source: pomerium/charts/pomerium/templates/authorize-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: pomerium-authorize
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: authorize
  name: pomerium-authorize
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pomerium-authorize
      app.kubernetes.io/instance: pomerium
  template:
    metadata:
      annotations:
        checksum: 7ff5533132871d3ade5a5d1e5f74d91af0b1e19ffd9298947ed6b86932090d35
      labels:
        app.kubernetes.io/name: pomerium-authorize
        helm.sh/chart: pomerium-25.0.2
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: pomerium
    spec:
      containers:
      - name: pomerium
        image: pomerium/pomerium:v0.15.7
        imagePullPolicy: IfNotPresent
        args:
          - --config=/etc/pomerium/config.yaml
        env:        
        - name: CERTIFICATE_FILE
          value: /pomerium/tls/tls.crt
        - name: CERTIFICATE_KEY_FILE
          value: /pomerium/tls/tls.key
        - name: SERVICES
          value: authorize
        - name: SIGNING_KEY
          valueFrom:
            secretKeyRef:
              name: pomerium-signing-key
              key: signing-key        
        - name: POD_IP
          valueFrom: 
            fieldRef: 
              fieldPath: status.podIP
        - name: METRICS_PORT
          value: "9090"
        - name: METRICS_ADDRESS
          value: "$(POD_IP):$(METRICS_PORT)"
        envFrom:
          - secretRef:
              name: pomerium-shared
        ports:
          - containerPort: 80
            name: grpc
            protocol: TCP
          - containerPort: 9090
            name: metrics
            protocol: TCP
        livenessProbe:
          tcpSocket:
            port: grpc
          initialDelaySeconds: 15
        readinessProbe:
          tcpSocket:
            port: grpc
        resources:
          requests:
            cpu: "0.01"
            memory: 16Mi
        volumeMounts:
          - mountPath: /etc/pomerium/
            name: config
          - mountPath: /pomerium/tls
            name: service-tls
          - mountPath: /pomerium/ca
            name: ca-tls
      serviceAccountName: pomerium-authorize
      volumes:
        - name: config
          secret:
            secretName: pomerium
        - name: ca-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
        - name: service-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
---
# Source: pomerium/charts/pomerium/templates/databroker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: pomerium-databroker
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: databroker
  name: pomerium-databroker
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pomerium-databroker
      app.kubernetes.io/instance: pomerium
  template:
    metadata:
      annotations:
        checksum: 7ff5533132871d3ade5a5d1e5f74d91af0b1e19ffd9298947ed6b86932090d35
      labels:
        app.kubernetes.io/name: pomerium-databroker
        helm.sh/chart: pomerium-25.0.2
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: pomerium
    spec:
      containers:
      - name: pomerium
        image: pomerium/pomerium:v0.15.7
        imagePullPolicy: IfNotPresent
        args:
          - --config=/etc/pomerium/config.yaml
        env:        
        - name: CERTIFICATE_FILE
          value: /pomerium/tls/tls.crt
        - name: CERTIFICATE_KEY_FILE
          value: /pomerium/tls/tls.key
        - name: SERVICES
          value: databroker
        - name: DATABROKER_STORAGE_TYPE
          value: redis        
        - name: POD_IP
          valueFrom: 
            fieldRef: 
              fieldPath: status.podIP
        - name: METRICS_PORT
          value: "9090"
        - name: METRICS_ADDRESS
          value: "$(POD_IP):$(METRICS_PORT)"        
        - name: DATABROKER_STORAGE_CERT_FILE
          value: /pomerium/databroker-client-tls/tls.crt
        - name: DATABROKER_STORAGE_KEY_FILE
          value: /pomerium/databroker-client-tls/tls.key
        - name: DATABROKER_STORAGE_CA_FILE
          value: /pomerium/databroker-client-tls/ca.crt
        envFrom:
          - secretRef:
              name: pomerium-shared
          - secretRef:
              name: pomerium-redis-password
        ports:
          - containerPort: 80
            name: grpc
            protocol: TCP
          - containerPort: 9090
            name: metrics
            protocol: TCP
        livenessProbe:
          tcpSocket:
            port: grpc
          initialDelaySeconds: 15
        readinessProbe:
          tcpSocket:
            port: grpc
        resources:
          requests:
            cpu: "0.01"
            memory: 16Mi
        volumeMounts:
          - mountPath: /pomerium/databroker-client-tls
            name: databroker-client-tls
          - mountPath: /etc/pomerium/
            name: config
          - mountPath: /pomerium/tls
            name: service-tls
          - mountPath: /pomerium/ca
            name: ca-tls
      serviceAccountName: pomerium-databroker
      volumes:
        - name: databroker-client-tls
          secret:
            secretName: internal-pomerium-secret
        - name: config
          secret:
            secretName: pomerium
        - name: ca-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
        - name: service-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
---
# Source: pomerium/charts/pomerium/templates/proxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: pomerium-proxy
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/component: proxy
  name: pomerium-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pomerium-proxy
      app.kubernetes.io/instance: pomerium
  template:
    metadata:
      annotations:
        checksum: 7ff5533132871d3ade5a5d1e5f74d91af0b1e19ffd9298947ed6b86932090d35
      labels:
        app.kubernetes.io/name: pomerium-proxy
        helm.sh/chart: pomerium-25.0.2
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: pomerium
    spec:
      containers:
      - name: pomerium
        image: pomerium/pomerium:v0.15.7
        imagePullPolicy: IfNotPresent
        args:
          - --config=/etc/pomerium/config.yaml
        env:        
        - name: CERTIFICATE_FILE
          value: /pomerium/tls/tls.crt
        - name: CERTIFICATE_KEY_FILE
          value: /pomerium/tls/tls.key
        - name: SERVICES
          value: proxy        
        - name: POD_IP
          valueFrom: 
            fieldRef: 
              fieldPath: status.podIP
        - name: METRICS_PORT
          value: "9090"
        - name: METRICS_ADDRESS
          value: "$(POD_IP):$(METRICS_PORT)"
        envFrom:
          - secretRef:
              name: pomerium-shared
        ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 9090
            name: metrics
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
        resources:
          requests:
            cpu: "0.01"
            memory: 16Mi
        volumeMounts:
          - mountPath: /etc/pomerium/
            name: config
          - mountPath: /pomerium/tls
            name: service-tls
          - mountPath: /pomerium/ca
            name: ca-tls
      serviceAccountName: pomerium-proxy
      volumes:
        - name: config
          secret:
            secretName: pomerium
        - name: ca-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
        - name: service-tls
          secret:
            secretName: internal-pomerium-secret
            optional: true
---
# Source: pomerium/charts/pomerium/charts/redis/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pomerium-redis-master
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: pomerium
      app.kubernetes.io/component: master
  serviceName: pomerium-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-14.7.2
        app.kubernetes.io/instance: pomerium
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 0e8c0a64b6955521b8fdfcddd371be1e6a74ac9cb0ff48ddd5cd0ea2cd61af24
        checksum/health: bd1b7a0e60568113e185c194305fe5a9cfe57bd382d517452b4ad4df708cf08e
        checksum/scripts: a0f9168a6225ed5cf4b72ff914ee25f0101f1d67d5f367a3b8ff5e2f80d563dc
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: pomerium-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: pomerium
                    app.kubernetes.io/component: master
                namespaces:
                  - "pomerium"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.4-debian-10-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "yes"
            - name: REDIS_TLS_PORT
              value: "6379"
            - name:  REDIS_TLS_AUTH_CLIENTS
              value: "yes"
            - name:  REDIS_TLS_CERT_FILE
              value: /opt/bitnami/redis/certs/tls.crt
            - name:  REDIS_TLS_KEY_FILE
              value: /opt/bitnami/redis/certs/tls.key
            - name:  REDIS_TLS_CA_FILE
              value: /opt/bitnami/redis/certs/ca.crt
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
            - name: redis-certificates
              mountPath: /opt/bitnami/redis/certs
              readOnly: true
      volumes:
        - name: start-scripts
          configMap:
            name: pomerium-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: pomerium-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: pomerium-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-certificates
          secret:
            secretName: pomerium-redis-tls
            defaultMode: 256
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: pomerium
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: pomerium/charts/pomerium/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pomerium-redis-replicas
  namespace: "pomerium"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-14.7.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: pomerium
      app.kubernetes.io/component: replica
  serviceName: pomerium-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-14.7.2
        app.kubernetes.io/instance: pomerium
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 0e8c0a64b6955521b8fdfcddd371be1e6a74ac9cb0ff48ddd5cd0ea2cd61af24
        checksum/health: bd1b7a0e60568113e185c194305fe5a9cfe57bd382d517452b4ad4df708cf08e
        checksum/scripts: a0f9168a6225ed5cf4b72ff914ee25f0101f1d67d5f367a3b8ff5e2f80d563dc
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: pomerium-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: pomerium
                    app.kubernetes.io/component: replica
                namespaces:
                  - "pomerium"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.4-debian-10-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: pomerium-redis-master-0.pomerium-redis-headless.pomerium.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "yes"
            - name: REDIS_TLS_PORT
              value: "6379"
            - name:  REDIS_TLS_AUTH_CLIENTS
              value: "yes"
            - name:  REDIS_TLS_CERT_FILE
              value: /opt/bitnami/redis/certs/tls.crt
            - name:  REDIS_TLS_KEY_FILE
              value: /opt/bitnami/redis/certs/tls.key
            - name:  REDIS_TLS_CA_FILE
              value: /opt/bitnami/redis/certs/ca.crt
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
            - name: redis-certificates
              mountPath: /opt/bitnami/redis/certs
              readOnly: true
      volumes:
        - name: start-scripts
          configMap:
            name: pomerium-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: pomerium-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: pomerium-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: redis-certificates
          secret:
            secretName: pomerium-redis-tls
            defaultMode: 256
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: pomerium
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: pomerium/charts/pomerium/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pomerium
  labels:
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/instance: pomerium
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pomerium
    release: prometheus
spec:
  selector:
    # TODO remove when pomerium-cache service is removed
    matchExpressions:
      - key: app.kubernetes.io/name
        operator: NotIn
        values:
          - pomerium-cache
    matchLabels:
      helm.sh/chart: pomerium-25.0.2
      app.kubernetes.io/instance: pomerium
  endpoints:
  - port: metrics
---
# Source: pomerium/charts/pomerium/templates/signing-key-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: pomerium
    helm.sh/chart: pomerium-25.0.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: pomerium
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook: pre-install
  name: pomerium-signing-key
type: Opaque
data:
  signing-key: TFMwdExTMUNSVWRKVGlCRlF5QlFVa2xXUVZSRklFdEZXUzB0TFMwdENrMUlZME5CVVVWRlNVbE5RbFIzT1RkME1YcGhTVWxqWmtwNVpXMW9NM0VyVWpCbE5HWk1RVWRJVkZWU2FUaFpVa2xLTDNkdlFXOUhRME54UjFOTk5Ea0tRWGRGU0c5VlVVUlJaMEZGTlVsM1RFNTZNMjFXVGxwRVJtSmFPRGR1UlVwV1NVcFhNMDlXWnpWemJtTnJaRlIxVkdoQlkwWndkRUZyVEhrNWEwMWtNZ3AzTDNSTUwwcHNiVFZEWTBVdlYxTndRbUozVUdWUVUwZExUbGRtVkRoa1dHRjNQVDBLTFMwdExTMUZUa1FnUlVNZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFvPQ==
